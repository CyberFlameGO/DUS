apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '25.0.0'
}

apt {
    arguments {
        stagGeneratedPackageName "com.flipkart.dus.stag.generated"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.android.support:support-annotations:25.3.1'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.mockito:mockito-core:1.10.8'
    compile 'com.vimeo.stag:stag-library:2.1.2'
    compile 'com.facebook.react:react-native:0.47.+'
    apt 'com.vimeo.stag:stag-library-compiler:2.1.2'
}

apply plugin: 'artifactory'
apply plugin: 'com.github.dcendents.android-maven'

allprojects {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url ARTIFACTORY_REPO_URL + RELEASE_REPO_KEY }
        maven { url ARTIFACTORY_REPO_URL + RELEASES_REPO_KEY }
        maven { url ARTIFACTORY_REPO_URL + SNAPSHOT_REPO_KEY }
        maven { url ARTIFACTORY_REPO_URL + SNAPSHOTS_REPO_KEY }
    }
}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

group = ARTIFACTORY_GROUP
version = VERSION_NAME_DUS
status = STATUS

apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

configurations {
    published
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
    }
}

publishing {
    repositories {
        maven {
            url ARTIFACTORY_REPO_URL + "libs-${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'release'}-local"
        }
    }
    publications {
        maven(MavenPublication) {
            groupId ARTIFACTORY_GROUP
            artifactId 'dus'
            version VERSION_NAME_DUS
            // Or use same version as in android branch
            // version = android.defaultConfig.versionName

            artifact bundleRelease
            artifact sourceJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.compile.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', 'compile')

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}

